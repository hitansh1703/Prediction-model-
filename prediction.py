# -*- coding: utf-8 -*-
"""last.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OZ22YMjKaRCxSqs_GPNdElVfI92pt8NT
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd 
import datetime

import csv 
import matplotlib.pyplot as plt 
from statsmodels.tsa.arima_model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import acf
from statsmodels.tsa.api import acf, pacf, graphics
from statsmodels.tsa.ar_model import AutoReg, ar_select_order
from statsmodels.tsa.stattools import adfuller
import pmdarima as pm
import statsmodels.api as sm

from pandas.plotting import autocorrelation_plot

from sklearn.metrics import mean_squared_error

# %matplotlib inline

columns = ['Date', 'U.S.', 'Oregon', 'Nevada']
df = pd.read_csv('C:\\backup hitansh\\sem 5\\IOT\\pro\\unemp_rate.csv', names=columns, index_col='Date' , header=0 , parse_dates=True)
#df

df['U.S.'] = df['U.S.'].astype('float64')
df['Oregon'] = df['Oregon'].astype('float64')
df['Nevada'] = df['Nevada'].astype('float64')

#df.dtypes

start_date = '1976-01-01'
end_date = '2020-09-01'

period = (df.index >= start_date) & (df.index <= end_date)
df = df.loc[period]
df.head()

#df.tail()


df1 = df
print('p-value : ', adfuller(df1['Nevada'].dropna())[1])

print('p-value : ', adfuller(df1['U.S.'].dropna())[1])

df1['Nevada_1st_order'] = df1['Nevada'] - df1['Nevada'].shift(6)

print('p-value : ', adfuller(df1['Nevada_1st_order'].dropna())[1])



fig = plt.figure(figsize=(18,10))

ax1 = fig.add_subplot(311)
fig = plot_acf(df1['Nevada'].dropna(),
               ax=ax1,
               title="Autocorrelation on Original Series")

ax2 = fig.add_subplot(312)
fig = plot_acf(df1['Nevada'].diff(6).dropna(),
               ax=ax2,
               title="1st Order Differencing")

ax3 = fig.add_subplot(313)
fig = plot_acf(df1['Nevada'].diff().diff(12).dropna(),
               ax=ax3,
               title="2nd Order Differencing")



df1['Nevada_2nd_order'] = df1['Nevada'].diff().diff(12)
df1.head()
df1['Nevada'].plot(figsize = (18,5))

model1_111 = ARIMA(df1['U.S.'], order=(1,1,1))
model1_111_fit = model1_111.fit(disp=0)
print(model1_111_fit.summary())

residuals_111  = pd.DataFrame(model1_111_fit.resid)
fig , ax = plt.subplots(1,2)
residuals_111.plot(title="Residual",ax=ax[0] , figsize=(18,10))
residuals_111.plot(kind="kde",title="Density" , ax=ax[1])

plt.rcParams.update({'figure.figsize':(18,7) , 'figure.dpi' : 200})
model1_111_fit.plot_predict(dynamic=False)
plt.legend(loc= "upper left" , fontsize=12)

size = int(len(df1['U.S.'])*0.80)

train = df1['U.S.'][0:size]
test = df1['U.S.'][size:len(df1['U.S.'])]

model_321  = ARIMA(train , order=(3,2,1))
fitted = model_321.fit(disp=-1)
print(fitted.summary())

#forcast
fc , se ,conf =fitted.forecast(108, alpha=0.05)
#panda series 
fc_series = pd.Series(fc,index=test.index)
lower_series = pd.Series(conf[1,0],index=test.index)
upper_series = pd.Series(conf[1,0],index=test.index)

#plot
plt.figure(figsize=(17,5) , dpi=100)
plt.plot(train , label="Training")
plt.plot(test ,  label="Actual")
plt.plot(fc_series , label="Forecast")
plt.fill_between(lower_series.index , lower_series, upper_series , color='k' , alpha=.15)

#ARIMA(2,0,1)(0,1,1)[12]
model_010= ARIMA(train , order=(0,1,0))
fitted =model_010.fit(disp=-1)
#forecast
fc , se, conf= fitted.forecast(108, alpha=-0.05)
#panda series

fc_series = pd.Series(fc , index=test.index)
lower_series = pd.Series(conf[:,0] ,  index=test.index)
upper_series= pd.Series(conf[:,1] , index=test.index)

#plot
plt.figure(figsize=(18,8) , dpi=100)
plt.plot(train , label="Training")
plt.plot(test ,  label="Actual")
plt.plot(fc_series , label="Forecast")
plt.fill_between(lower_series.index , lower_series, upper_series , color='k' , alpha=.15)
plt.title("Forecast vs Actual Trends")
plt.legend(loc= 'upper left', fontsize=12)

model_auto= pm.auto_arima(df1['U.S.'], start_p=1, start_q=1, test='adf', max_p=3,max_q=3,m=1,d=None , seasonal=False , start_P=0, D=0, trace=True , error_action='ignore', suppress_warnings=True,stepwise=True)
print(model_auto.summary())

model_auto.plot_diagnostics(figsize=(18,10))

#plot
fig,axes=plt.subplots(2,1, figsize=(18,10),dpi=100,sharex=True)
#Usual diff.
axes[0].plot(df1['Nevada'][:], label='Origin Serie')
axes[0].plot(df1['Nevada'][:].diff(1), label='Usual diffrencing' , color='blue')
axes[0].set_title('Usual Diffrencing')
axes[0].legend(loc='upper left' , fontsize=12)

# sesonal diff 
axes[1].plot(df1['Nevada'][:], label='Origin Serie')
axes[0].plot(df1['Nevada'][:].diff().diff(12).dropna(), label='Origin Serie', color='darkgreen')
axes[1].set_title('Seasonal Diffrencing')

plt.legend(loc='upper left',fontsize=12)
plt.suptitle('Nevada Unemployment Rate', fontsize=16)

#sesonalfit
smodel = pm.auto_arima(df1['U.S.'], start_p=1, start_q=1, test='adf', max_p=3,max_q=3,m=12, start_P=0, seasonal=True,d=None, D=1, trace=True , error_action='ignore', suppress_warnings=True,stepwise=True)
smodel.summary()

n_period=30
fitted , confint, =smodel.predict(n_period , return_conf_int=True)
index_of_fc= pd.date_range(df1['U.S.'].index[536], periods = n_period , freq='MS')

#make series for plotting purpose 
fitted_series = pd.Series(fitted, index = index_of_fc)
lower_series = pd.Series(confint[:,0], index=index_of_fc)
upper_series = pd.Series(confint[:,1], index=index_of_fc)

#plot
plt.figure(figsize=(18,10))
plt.plot(df1['U.S.'])
plt.plot(fitted_series, color='darkgreen')
plt.fill_between(lower_series.index, lower_series , upper_series , color='k', alpha=.15)
plt.title("SARIMA - Unemplyment Rate in U.S in the final Forecasting Model")


plt.show()



#Building ARIMA forcasting model 


#!pip install statsmodels.tsa.ar_model.AutoReg
#!pip install statsmodels

#♪♫♪♫♪♫♪♫♪♫♪♫